version: '3.8'

services:
  # Main RAG API Service
  indonesian-legal-rag:
    build: .
    container_name: indonesian-legal-rag-api
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - APP_HOST=0.0.0.0
      - APP_PORT=8000
      - VECTOR_STORE_PATH=/app/data/chroma_db
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rag-network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: indonesian-legal-rag-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - indonesian-legal-rag
    restart: unless-stopped
    networks:
      - rag-network

  # Optional: Redis for caching (future enhancement)
  redis:
    image: redis:7-alpine
    container_name: indonesian-legal-rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - rag-network
    command: redis-server --appendonly yes

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus
    container_name: indonesian-legal-rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - rag-network

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana
    container_name: indonesian-legal-rag-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - rag-network

networks:
  rag-network:
    driver: bridge

volumes:
  redis-data:
  prometheus-data:
  grafana-data: